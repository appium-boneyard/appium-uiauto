// The Command Proxy relays UIAuto message to and from Appium. It is also the
// UIAuto facade for Appium.
//
// The message route is the following:
// Appium <--> Command Proxy <--> Instruments
// The medium between Instruments and Command Proxy is the command-proxy-client
// script.
//
// Command Proxy --> Instruments message format: {cmd:"<CMD>"}
//
// Instruments --> Command Proxy message format:
// <one char message type>,<stringified json data>
// <stringified json data> format:
// {status:<status>, value:<result>}

'use strict';

var logger = require('./logger.js'),
    fs = require('fs'),
    through = require('through'),
    net = require('net'),
    mkdirp = require('mkdirp'),
    path = require('path');

var MORE_COMMAND = '#more';
var MESSAGE_TYPES = ['error', 'no data', 'regular', 'chunk', 'last chunk'];

var UNKNOWN_ERROR = {
  status: 13,
  value: 'Error parsing socket data from instruments'
};

function isChunk(data) {
  return data.type && data.type.indexOf('chunk') >= 0;
}

var TheProxy = function TheProxy(opts) {
  opts = opts || {};
  var curCommand = null;
  var onReceiveCommand = null;
  var commandQueue = [];
  var sock = opts.sock || '/tmp/instruments_sock';
  var socketServer = null;
  var hasConnected = false;
  var bufferedData = '';
  var currentSocket = null;
  var firstSocketConnectionCb = null;
  var resultBuffer = '';
  var onSocketConnect = function onSocketConnect(conn) {
    if (!hasConnected) {
      hasConnected = true;
      logger.info('Instruments is ready to receive commands');
      firstSocketConnectionCb();
    }
    conn.setEncoding('utf8'); // get strings from sockets rather than buffers

    conn.pipe(through(function (data) {
      // when data comes in, route it according to the "event" property
      logger.debug('Socket data received (' + data.length + ' bytes)');
      bufferedData += data;
    }));

    currentSocket = conn;

    conn.on('close', function () {
      currentSocket = null;
    });

    conn.on('end', function () {
      var data = bufferedData;
      bufferedData = '';
      var parsedData;
      try {
        parsedData = {
          type: MESSAGE_TYPES[parseInt(data[0], 10)]
        };
        if (parsedData.type !== 'no data') {
          // format is <one char message type>,<DATA>
          parsedData.result = data.substring(2);
        }
      } catch (e) {
        logger.error('Couldn\'t parse data from socket, maybe buffer issue?');
        logger.error(data);
        parsedData = {
          type: 'error',
          error: UNKNOWN_ERROR
        };
      }
      logger.debug('Socket data being routed.');
      getResultAndSendNext(parsedData, conn);
    });
  };

  var waitForCommand = function waitForCommand(cb) {
    if (commandQueue.length) {
      cb();
    } else {
      onReceiveCommand = cb;
    }
  };

  var getResultAndSendNext = function getResultAndSendNext(data, c) {
    var hasResult = typeof data.result !== 'undefined';
    var result;
    if (hasResult && !curCommand) {
      logger.debug('Got a result when we weren\'t expecting one! Ignoring it');
      logger.debug('Result was: ' + data.result);
    } else if (!hasResult && curCommand) {
      logger.debug('Instruments didn\'t send a result even though we were expecting one');
      hasResult = true;
      data.result = false;
    }

    if (hasResult && curCommand) {
      if (data.result) {
        logger.debug('Got result from instruments: ' + data.result.slice(0, 300));
      } else {
        logger.debug('Got null result from instruments');
      }
      if (isChunk(data)) {
        resultBuffer += data.result;
        logger.debug('Got chunk data, current resultBuffer length: ' + resultBuffer.length);
        if (data.type === 'last chunk') {
          logger.debug('This is the last data final length: ' + resultBuffer.length);
          // this is the last row, unpack and respond to command
          try {
            result = JSON.parse(resultBuffer);
          } catch (err) {
            logger.error('Couldn\'t parse result buffer: ' + err);
            result = UNKNOWN_ERROR;
          }
          resultBuffer = '';
          curCommand.cb(result);
          curCommand = null;
        } else {
          logger.debug('Not the last chunk, trying to get more');
          commandQueue.unshift({ cmd: MORE_COMMAND, cb: curCommand.cb });
        }
      } else {
        try {
          result = JSON.parse(data.result);
        } catch (err) {
          logger.error('Couldn\'t parse result buffer: ' + err);
          result = UNKNOWN_ERROR;
        }
        curCommand.cb(result);
        curCommand = null;
      }
    }

    waitForCommand(function () {
      curCommand = commandQueue.shift();
      onReceiveCommand = null;
      logger.debug('Sending command to instruments: ' + curCommand.cmd);
      c.write(JSON.stringify({ cmd: curCommand.cmd }));
      c.end();
      //debug("Closing our half of the connection");
    });
  };

  this.getSock = function () {
    return sock;
  };

  this.sendCommand = function (cmd, cb) {
    commandQueue.push({ cmd: cmd, cb: cb });
    if (onReceiveCommand) {
      onReceiveCommand();
    }
  };

  this.shutdown = function (cb) {
    // make sure clear out command cbs so we can't have any lingering cbs
    // if a socket request makes it through after exit somehow
    curCommand = null;
    onReceiveCommand = null;

    if (currentSocket) {
      logger.debug('Destroying instruments client socket.');
      currentSocket.end();
      currentSocket.destroy(); // close this
      currentSocket = null;
    }
    if (socketServer) {
      logger.debug('Closing socket server.');
      socketServer.close(cb);
      socketServer = null;
    } else {
      cb();
    }
  };

  this.safeShutdown = function (cb) {
    logger.debug('Shutting down command proxy and ignoring any errors');
    try {
      this.shutdown(function (err) {
        if (err) logger.debug('Ignoring error: ' + err);
        cb();
      });
    } catch (ign) {
      logger.debug('Ignoring error: ' + ign);
      cb();
    }
  };

  this.start = function (_firstSocketConnectionCb, cb) {
    cb = cb || function () {};
    firstSocketConnectionCb = _firstSocketConnectionCb || function () {};
    //initSocketServer
    socketServer = net.createServer({ allowHalfOpen: true }, onSocketConnect);

    socketServer.on('close', function () {
      logger.debug('Instruments socket server was closed');
    });

    // remove socket file if it currently exists
    try {
      fs.unlinkSync(sock);
    } catch (err) {
      // if we get any error other than "socket doesn't exist", fail
      if (err.message.indexOf('ENOENT') === -1) {
        return cb(err);
      }
    }
    mkdirp(path.dirname(sock), function (err) {
      if (err) return cb(err);
      socketServer.listen(sock, function (err) {
        if (err) return cb(err);
        logger.debug('Instruments socket server started at ' + sock);
        cb();
      });
    });
  };
};

module.exports = TheProxy;
//# sourceMappingURL=data:application/json;base64,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QUFZLEVBQUUsQ0FBQzs7QUFFckUsZ0JBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUMsYUFBYSxFQUFFLElBQUksRUFBQyxFQUNqRCxlQUFlLENBQUMsQ0FBQzs7QUFFckIsZ0JBQVksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFlBQVk7QUFDbkMsWUFBTSxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0tBQ3RELENBQUMsQ0FBQzs7O0FBR0gsUUFBSTtBQUNGLFFBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDckIsQ0FBQyxPQUFPLEdBQUcsRUFBRTs7QUFFWixVQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQ3hDLGVBQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO09BQ2hCO0tBQ0Y7QUFDRCxVQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLEdBQUcsRUFBRTtBQUN4QyxVQUFJLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4QixrQkFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxHQUFHLEVBQUU7QUFDdkMsWUFBSSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDeEIsY0FBTSxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM3RCxVQUFFLEVBQUUsQ0FBQztPQUNOLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztHQUVKLENBQUM7Q0FFSCxDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDIiwiZmlsZSI6ImxpYi9jb21tYW5kLXByb3h5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIENvbW1hbmQgUHJveHkgcmVsYXlzIFVJQXV0byBtZXNzYWdlIHRvIGFuZCBmcm9tIEFwcGl1bS4gSXQgaXMgYWxzbyB0aGVcbi8vIFVJQXV0byBmYWNhZGUgZm9yIEFwcGl1bS5cbi8vXG4vLyBUaGUgbWVzc2FnZSByb3V0ZSBpcyB0aGUgZm9sbG93aW5nOlxuLy8gQXBwaXVtIDwtLT4gQ29tbWFuZCBQcm94eSA8LS0+IEluc3RydW1lbnRzXG4vLyBUaGUgbWVkaXVtIGJldHdlZW4gSW5zdHJ1bWVudHMgYW5kIENvbW1hbmQgUHJveHkgaXMgdGhlIGNvbW1hbmQtcHJveHktY2xpZW50XG4vLyBzY3JpcHQuXG4vL1xuLy8gQ29tbWFuZCBQcm94eSAtLT4gSW5zdHJ1bWVudHMgbWVzc2FnZSBmb3JtYXQ6IHtjbWQ6XCI8Q01EPlwifVxuLy9cbi8vIEluc3RydW1lbnRzIC0tPiBDb21tYW5kIFByb3h5IG1lc3NhZ2UgZm9ybWF0OlxuLy8gPG9uZSBjaGFyIG1lc3NhZ2UgdHlwZT4sPHN0cmluZ2lmaWVkIGpzb24gZGF0YT5cbi8vIDxzdHJpbmdpZmllZCBqc29uIGRhdGE+IGZvcm1hdDpcbi8vIHtzdGF0dXM6PHN0YXR1cz4sIHZhbHVlOjxyZXN1bHQ+fVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBsb2dnZXIgPSByZXF1aXJlKCcuL2xvZ2dlci5qcycpLFxuICAgIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICB0aHJvdWdoID0gcmVxdWlyZSgndGhyb3VnaCcpLFxuICAgIG5ldCA9IHJlcXVpcmUoJ25ldCcpLFxuICAgIG1rZGlycCA9IHJlcXVpcmUoJ21rZGlycCcpLFxuICAgIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbnZhciBNT1JFX0NPTU1BTkQgPSBcIiNtb3JlXCI7XG52YXIgTUVTU0FHRV9UWVBFUyA9IFsnZXJyb3InLCdubyBkYXRhJywncmVndWxhcicsJ2NodW5rJywnbGFzdCBjaHVuayddO1xuXG52YXIgVU5LTk9XTl9FUlJPUiA9IHtcbiAgc3RhdHVzOiAxMyxcbiAgdmFsdWU6IFwiRXJyb3IgcGFyc2luZyBzb2NrZXQgZGF0YSBmcm9tIGluc3RydW1lbnRzXCJcbn07XG5cbmZ1bmN0aW9uIGlzQ2h1bmsoZGF0YSkgeyByZXR1cm4gZGF0YS50eXBlICYmIGRhdGEudHlwZS5pbmRleE9mKCdjaHVuaycpID49IDA7IH1cblxudmFyIFRoZVByb3h5ID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHZhciBjdXJDb21tYW5kID0gbnVsbDtcbiAgdmFyIG9uUmVjZWl2ZUNvbW1hbmQgPSBudWxsO1xuICB2YXIgY29tbWFuZFF1ZXVlID0gW107XG4gIHZhciBzb2NrID0gb3B0cy5zb2NrIHx8ICcvdG1wL2luc3RydW1lbnRzX3NvY2snO1xuICB2YXIgc29ja2V0U2VydmVyID0gbnVsbDtcbiAgdmFyIGhhc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICB2YXIgYnVmZmVyZWREYXRhID0gXCJcIjtcbiAgdmFyIGN1cnJlbnRTb2NrZXQgPSBudWxsO1xuICB2YXIgZmlyc3RTb2NrZXRDb25uZWN0aW9uQ2IgPSBudWxsO1xuICB2YXIgcmVzdWx0QnVmZmVyID0gXCJcIjtcbiAgdmFyIG9uU29ja2V0Q29ubmVjdCA9IGZ1bmN0aW9uIChjb25uKSB7XG4gICAgaWYgKCFoYXNDb25uZWN0ZWQpIHtcbiAgICAgIGhhc0Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICBsb2dnZXIuaW5mbyhcIkluc3RydW1lbnRzIGlzIHJlYWR5IHRvIHJlY2VpdmUgY29tbWFuZHNcIik7XG4gICAgICBmaXJzdFNvY2tldENvbm5lY3Rpb25DYigpO1xuICAgIH1cbiAgICBjb25uLnNldEVuY29kaW5nKCd1dGY4Jyk7IC8vIGdldCBzdHJpbmdzIGZyb20gc29ja2V0cyByYXRoZXIgdGhhbiBidWZmZXJzXG5cbiAgICBjb25uLnBpcGUodGhyb3VnaChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgLy8gd2hlbiBkYXRhIGNvbWVzIGluLCByb3V0ZSBpdCBhY2NvcmRpbmcgdG8gdGhlIFwiZXZlbnRcIiBwcm9wZXJ0eVxuICAgICAgbG9nZ2VyLmRlYnVnKFwiU29ja2V0IGRhdGEgcmVjZWl2ZWQgKFwiICsgZGF0YS5sZW5ndGggKyBcIiBieXRlcylcIik7XG4gICAgICBidWZmZXJlZERhdGEgKz0gZGF0YTtcbiAgICB9KSk7XG5cbiAgICBjdXJyZW50U29ja2V0ID0gY29ubjtcblxuICAgIGNvbm4ub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgY3VycmVudFNvY2tldCA9IG51bGw7XG4gICAgfSk7XG5cbiAgICBjb25uLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZGF0YSA9IGJ1ZmZlcmVkRGF0YTtcbiAgICAgIGJ1ZmZlcmVkRGF0YSA9IFwiXCI7XG4gICAgICB2YXIgcGFyc2VkRGF0YTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcnNlZERhdGEgPSB7XG4gICAgICAgICAgdHlwZTogTUVTU0FHRV9UWVBFU1twYXJzZUludChkYXRhWzBdLCAxMCldLFxuICAgICAgICB9O1xuICAgICAgICBpZiAocGFyc2VkRGF0YS50eXBlICE9PSAnbm8gZGF0YScpIHtcbiAgICAgICAgICAvLyBmb3JtYXQgaXMgPG9uZSBjaGFyIG1lc3NhZ2UgdHlwZT4sPERBVEE+XG4gICAgICAgICAgcGFyc2VkRGF0YS5yZXN1bHQgPSBkYXRhLnN1YnN0cmluZygyKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2dnZXIuZXJyb3IoXCJDb3VsZG4ndCBwYXJzZSBkYXRhIGZyb20gc29ja2V0LCBtYXliZSBidWZmZXIgaXNzdWU/XCIpO1xuICAgICAgICBsb2dnZXIuZXJyb3IoZGF0YSk7XG4gICAgICAgIHBhcnNlZERhdGEgPSB7XG4gICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICBlcnJvcjogVU5LTk9XTl9FUlJPUlxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmRlYnVnKFwiU29ja2V0IGRhdGEgYmVpbmcgcm91dGVkLlwiKTtcbiAgICAgIGdldFJlc3VsdEFuZFNlbmROZXh0KHBhcnNlZERhdGEsIGNvbm4pO1xuICAgIH0pO1xuXG4gIH07XG5cbiAgdmFyIHdhaXRGb3JDb21tYW5kID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgaWYgKGNvbW1hbmRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGNiKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uUmVjZWl2ZUNvbW1hbmQgPSBjYjtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldFJlc3VsdEFuZFNlbmROZXh0ICA9IGZ1bmN0aW9uIChkYXRhLCBjKSB7XG4gICAgdmFyIGhhc1Jlc3VsdCA9IHR5cGVvZiBkYXRhLnJlc3VsdCAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGlmIChoYXNSZXN1bHQgJiYgIWN1ckNvbW1hbmQpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIkdvdCBhIHJlc3VsdCB3aGVuIHdlIHdlcmVuJ3QgZXhwZWN0aW5nIG9uZSEgSWdub3JpbmcgaXRcIik7XG4gICAgICBsb2dnZXIuZGVidWcoXCJSZXN1bHQgd2FzOiBcIiArIGRhdGEucmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNSZXN1bHQgJiYgY3VyQ29tbWFuZCkge1xuICAgICAgbG9nZ2VyLmRlYnVnKFwiSW5zdHJ1bWVudHMgZGlkbid0IHNlbmQgYSByZXN1bHQgZXZlbiB0aG91Z2ggd2Ugd2VyZSBleHBlY3Rpbmcgb25lXCIpO1xuICAgICAgaGFzUmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGRhdGEucmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGhhc1Jlc3VsdCAmJiBjdXJDb21tYW5kKSB7XG4gICAgICBpZiAoZGF0YS5yZXN1bHQpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiR290IHJlc3VsdCBmcm9tIGluc3RydW1lbnRzOiBcIiArXG4gICAgICAgICAgICBkYXRhLnJlc3VsdC5zbGljZSgwLCAzMDApKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhcIkdvdCBudWxsIHJlc3VsdCBmcm9tIGluc3RydW1lbnRzXCIpO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ2h1bmsoZGF0YSkpIHtcbiAgICAgICAgcmVzdWx0QnVmZmVyICs9IGRhdGEucmVzdWx0O1xuICAgICAgICBsb2dnZXIuZGVidWcoXCJHb3QgY2h1bmsgZGF0YSwgY3VycmVudCByZXN1bHRCdWZmZXIgbGVuZ3RoOiBcIiArIHJlc3VsdEJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICBpZiAoZGF0YS50eXBlID09PSAnbGFzdCBjaHVuaycpIHtcbiAgICAgICAgICBsb2dnZXIuZGVidWcoXCJUaGlzIGlzIHRoZSBsYXN0IGRhdGEgZmluYWwgbGVuZ3RoOiBcIiArIHJlc3VsdEJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIGxhc3Qgcm93LCB1bnBhY2sgYW5kIHJlc3BvbmQgdG8gY29tbWFuZFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3VsdEJ1ZmZlcik7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJDb3VsZG4ndCBwYXJzZSByZXN1bHQgYnVmZmVyOiBcIiArIGVycik7XG4gICAgICAgICAgICByZXN1bHQgPSBVTktOT1dOX0VSUk9SO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHRCdWZmZXIgPSBcIlwiO1xuICAgICAgICAgIGN1ckNvbW1hbmQuY2IocmVzdWx0KTtcbiAgICAgICAgICBjdXJDb21tYW5kID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2dnZXIuZGVidWcoXCJOb3QgdGhlIGxhc3QgY2h1bmssIHRyeWluZyB0byBnZXQgbW9yZVwiKTtcbiAgICAgICAgICBjb21tYW5kUXVldWUudW5zaGlmdCh7Y21kOiBNT1JFX0NPTU1BTkQsIGNiOiBjdXJDb21tYW5kLmNifSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShkYXRhLnJlc3VsdCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkNvdWxkbid0IHBhcnNlIHJlc3VsdCBidWZmZXI6IFwiICsgZXJyKTtcbiAgICAgICAgICByZXN1bHQgPSBVTktOT1dOX0VSUk9SO1xuICAgICAgICB9XG4gICAgICAgIGN1ckNvbW1hbmQuY2IocmVzdWx0KTtcbiAgICAgICAgY3VyQ29tbWFuZCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2FpdEZvckNvbW1hbmQoZnVuY3Rpb24gKCkge1xuICAgICAgY3VyQ29tbWFuZCA9IGNvbW1hbmRRdWV1ZS5zaGlmdCgpO1xuICAgICAgb25SZWNlaXZlQ29tbWFuZCA9IG51bGw7XG4gICAgICBsb2dnZXIuZGVidWcoXCJTZW5kaW5nIGNvbW1hbmQgdG8gaW5zdHJ1bWVudHM6IFwiICsgY3VyQ29tbWFuZC5jbWQpO1xuICAgICAgYy53cml0ZShKU09OLnN0cmluZ2lmeSh7Y21kOiBjdXJDb21tYW5kLmNtZH0pKTtcbiAgICAgIGMuZW5kKCk7XG4gICAgICAvL2RlYnVnKFwiQ2xvc2luZyBvdXIgaGFsZiBvZiB0aGUgY29ubmVjdGlvblwiKTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmdldFNvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHNvY2s7XG4gIH07XG5cbiAgdGhpcy5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uIChjbWQsIGNiKSB7XG4gICAgY29tbWFuZFF1ZXVlLnB1c2goe2NtZDogY21kLCBjYjogY2J9KTtcbiAgICBpZiAob25SZWNlaXZlQ29tbWFuZCkge1xuICAgICAgb25SZWNlaXZlQ29tbWFuZCgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnNodXRkb3duID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgLy8gbWFrZSBzdXJlIGNsZWFyIG91dCBjb21tYW5kIGNicyBzbyB3ZSBjYW4ndCBoYXZlIGFueSBsaW5nZXJpbmcgY2JzXG4gICAgLy8gaWYgYSBzb2NrZXQgcmVxdWVzdCBtYWtlcyBpdCB0aHJvdWdoIGFmdGVyIGV4aXQgc29tZWhvd1xuICAgIGN1ckNvbW1hbmQgPSBudWxsO1xuICAgIG9uUmVjZWl2ZUNvbW1hbmQgPSBudWxsO1xuXG4gICAgaWYgKGN1cnJlbnRTb2NrZXQpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIkRlc3Ryb3lpbmcgaW5zdHJ1bWVudHMgY2xpZW50IHNvY2tldC5cIik7XG4gICAgICBjdXJyZW50U29ja2V0LmVuZCgpO1xuICAgICAgY3VycmVudFNvY2tldC5kZXN0cm95KCk7IC8vIGNsb3NlIHRoaXNcbiAgICAgIGN1cnJlbnRTb2NrZXQgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoc29ja2V0U2VydmVyKSB7XG4gICAgICBsb2dnZXIuZGVidWcoXCJDbG9zaW5nIHNvY2tldCBzZXJ2ZXIuXCIpO1xuICAgICAgc29ja2V0U2VydmVyLmNsb3NlKGNiKTtcbiAgICAgIHNvY2tldFNlcnZlciA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuc2FmZVNodXRkb3duID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiU2h1dHRpbmcgZG93biBjb21tYW5kIHByb3h5IGFuZCBpZ25vcmluZyBhbnkgZXJyb3JzXCIpO1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnNodXRkb3duKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVycikgbG9nZ2VyLmRlYnVnKFwiSWdub3JpbmcgZXJyb3I6IFwiICsgZXJyKTtcbiAgICAgICAgY2IoKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgbG9nZ2VyLmRlYnVnKFwiSWdub3JpbmcgZXJyb3I6IFwiICsgaWduKTtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoX2ZpcnN0U29ja2V0Q29ubmVjdGlvbkNiLCBjYikge1xuICAgIGNiID0gY2IgfHwgZnVuY3Rpb24gKCkge307XG4gICAgZmlyc3RTb2NrZXRDb25uZWN0aW9uQ2IgPSBfZmlyc3RTb2NrZXRDb25uZWN0aW9uQ2IgfHwgZnVuY3Rpb24gKCkge307XG4gICAgLy9pbml0U29ja2V0U2VydmVyXG4gICAgc29ja2V0U2VydmVyID0gbmV0LmNyZWF0ZVNlcnZlcih7YWxsb3dIYWxmT3BlbjogdHJ1ZX0sXG4gICAgICAgIG9uU29ja2V0Q29ubmVjdCk7XG5cbiAgICBzb2NrZXRTZXJ2ZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgbG9nZ2VyLmRlYnVnKFwiSW5zdHJ1bWVudHMgc29ja2V0IHNlcnZlciB3YXMgY2xvc2VkXCIpO1xuICAgIH0pO1xuXG4gICAgLy8gcmVtb3ZlIHNvY2tldCBmaWxlIGlmIGl0IGN1cnJlbnRseSBleGlzdHNcbiAgICB0cnkge1xuICAgICAgZnMudW5saW5rU3luYyhzb2NrKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGlmIHdlIGdldCBhbnkgZXJyb3Igb3RoZXIgdGhhbiBcInNvY2tldCBkb2Vzbid0IGV4aXN0XCIsIGZhaWxcbiAgICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKFwiRU5PRU5UXCIpID09PSAtMSkge1xuICAgICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWtkaXJwKHBhdGguZGlybmFtZShzb2NrKSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7XG4gICAgICBzb2NrZXRTZXJ2ZXIubGlzdGVuKHNvY2ssIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhcIkluc3RydW1lbnRzIHNvY2tldCBzZXJ2ZXIgc3RhcnRlZCBhdCBcIiArIHNvY2spO1xuICAgICAgICBjYigpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgfTtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUaGVQcm94eTtcblxuIl19