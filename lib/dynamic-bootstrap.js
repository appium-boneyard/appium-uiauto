// Generate a bootstrap for the UIAuto Instruments script containing
// the environment variables we need.

'use strict';

var path = require('path'),
    _ = require('lodash'),
    crypto = require('crypto'),
    Q = require('q'),
    mkdirp = Q.denodeify(require('mkdirp')),
    fs = require('fs'),
    buildCollatedScript = require('./resolve-deps.js'),
    logger = require('./logger.js');

function getEnv(opts) {
  opts = opts || {};
  var bootstrapEnv = {
    nodePath: process.execPath,
    commandProxyClientPath: path.resolve(
      __dirname, '../../bin/command-proxy-client.js'),
    instrumentsSock: opts.sock || '/tmp/instruments_sock',
    interKeyDelay: opts.interKeyDelay || null,
    justLoopInfinitely: opts.justLoopInfinitely,
    autoAcceptAlerts: opts.autoAcceptAlerts,
    autoDismissAlerts: opts.autoDismissAlerts,
    sendKeyStrategy: opts.sendKeyStrategy,
  };
  return bootstrapEnv;
}

function buildCode(opts) {
  if (opts.code) return opts.code;

  var env = getEnv(opts);
  logger.debug('Dynamic env: ' + JSON.stringify(env));
  var bootstrapJs = path.resolve(__dirname, '../../uiauto/bootstrap.js');
  var imports = opts.imports || {};
  imports = imports.pre || [];
  var bootstrapCode = buildCollatedScript(bootstrapJs, imports);

  var lines = [];
  lines.push('// This file is automatically generated. Do not manually modify!');
  lines.push('');
  lines.push(bootstrapCode);
  lines.push('');
  lines.push('bootstrap({');
  for (let [key, value] of _.pairs(env)) {
    if (!_.isUndefined(value)) {
      var quote = typeof value === 'string' ? '\"' : '';
      lines.push('  "' + key + '": ' + quote + value + quote + ',');
    }
  }
  lines[lines.length - 1] = lines[lines.length - 1].replace(/,$/, '');
  lines.push('});');
  return lines.join('\r\n');
}

function computeHash(code) {
  return crypto.createHash('md5').update(code)
    .digest('hex').substring(0, 16);
}

var prepareBootstrap = function (opts) {
  logger.debug('Preparing uiauto bootstrap');
  opts = opts || {};

  // figuring out where to store dynamic bootstrap
  var dynamicBootstrapDir;
  if (process.env.APPIUM_BOOTSTRAP_DIR) {
    // mainly for test
    dynamicBootstrapDir = process.env.APPIUM_BOOTSTRAP_DIR;
  } else if (process.env.HOME) {
    dynamicBootstrapDir = path.resolve(process.env.HOME,
      'Library/Application Support/appium/bootstrap');
  } else {
    // no user dir, using tmp
    dynamicBootstrapDir = path.resolve(opts.tmpDir || '/tmp', 'appium/bootstrap');
  }
  logger.debug('Dynamic bootstrap dir: ' + dynamicBootstrapDir);

  // building code and hash
  var code = buildCode(opts);
  var hash = computeHash(code);
  var dynamicBootstrapPath = path.resolve(dynamicBootstrapDir,
    'bootstrap-' + hash + '.js');
  logger.debug('Dynamic bootstrap code: ' + code.split("\n")[0] + '...');
  logger.debug('Dynamic bootstrap path: ' + dynamicBootstrapPath);

  return mkdirp(dynamicBootstrapDir)
    .then(function () {
      // check existing code
      var codeIsGood = true;
      try {
        var existingCode = fs.readFileSync(dynamicBootstrapPath);
        codeIsGood = computeHash(existingCode) === hash;
      } catch (err) {
        codeIsGood = false;
      }
      // write file if necessary
      if (codeIsGood) {
        logger.debug('Reusing dynamic bootstrap: ' + dynamicBootstrapPath);
      } else {
        logger.debug('Creating or overwritting dynamic bootstrap: ' +
                     dynamicBootstrapPath);
        fs.writeFileSync(dynamicBootstrapPath, code, { flag: 'w+'});
      }
      return dynamicBootstrapPath;
    });
};
exports.prepareBootstrap = prepareBootstrap;
exports.getEnv = getEnv;
